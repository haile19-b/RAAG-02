import { VoyageAIClient } from "voyageai";
import { Data } from "../model/data.model.js";
import { searchSimilarData } from "../Functions/searchSimilarData.js";
import { askGemini } from "../Functions/askGemini.js";

const client = new VoyageAIClient({ apiKey: process.env.VOYAGE_API_KEY });

export const embedData = async (req,res)=>{

    const {My_Data} = req.body;

    if(!My_Data){
        return res.status(400).json({
            message:"data is required !",
            success:false
        })
    }

    try {
        const storedData = Data.findOne({text:My_Data})
        if(!storedData){
            return res.status(400).json({
                message:"the same data stored on the database!",
                success:false
            })
        }

        const embeddingResponse = await client.embed({
            input: [My_Data],
            model: 'voyage-3'
        });

        const embedding = embeddingResponse.data[0].embedding

        const embeddedData = await Data.create({
            text:My_Data,
            embedding
        })

        return res.status(201).json({
            message:"the text is embeddid successfully!",
            embeddedData
        })

    } catch (error) {
        return res.status(500).json({
            message:"server error",
            error:error.message,
            success:false
        })
    }
}

export const getReleventData = async(req,res) => {

    const {text} = req.body;
    if(!text){
        return res.status(400).json({
            message:"what text is you are searching for ?, there is no text!",
            success:false
        })
    }

    try {
        const embedResponse = await client.embed({
            input:[text],
            model:'voyage-3'
        })

        const embededText = embedResponse.data[0].embedding;

        const relevantData = await searchSimilarData(embededText);

        const textForm = relevantData.map(data => data.text).join("\n");

        const AiResponse = await askGemini(text,textForm)

        return res.status(200).json({
            message:"response is successfully generated by gemini",
            userInput:text,
            aiResponse:AiResponse
        })

        // return res.status(200).json({
        //     message:"relevent data successfully filtered!",
        //     data:relevantData,
        //     combinedText:textForm
        // })

        

    } catch (error) {
        return res.status(500).json({
            message:"Server Error Occored",
            error:error.message
        })
    }

}